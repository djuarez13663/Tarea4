
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 14 02:15:55 CST 2016
//----------------------------------------------------

package tarea4;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 14 02:15:55 CST 2016
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\117" +
    "\003\000\002\120\004\000\002\120\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\012\000" +
    "\002\006\004\000\002\006\003\000\002\005\012\000\002" +
    "\005\012\000\002\005\015\000\002\005\006\000\002\005" +
    "\015\000\002\005\015\000\002\005\015\000\002\005\012" +
    "\000\002\005\013\000\002\005\003\000\002\005\003\000" +
    "\002\007\004\000\002\007\004\000\002\010\012\000\002" +
    "\011\012\000\002\012\004\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\012\000\002\015\012\000\002\016\012\000\002" +
    "\020\012\000\002\021\012\000\002\022\012\000\002\023" +
    "\012\000\002\025\004\000\002\025\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\026\012\000\002" +
    "\027\012\000\002\030\012\000\002\031\012\000\002\032" +
    "\012\000\002\033\012\000\002\034\005\000\002\034\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\035\006\000\002\037\005\000\002\040\005\000\002\041" +
    "\005\000\002\042\005\000\002\045\005\000\002\046\005" +
    "\000\002\047\005\000\002\052\004\000\002\052\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\061\012\000\002\062\012" +
    "\000\002\063\012\000\002\063\012\000\002\064\012\000" +
    "\002\065\012\000\002\066\012\000\002\066\012\000\002" +
    "\067\012\000\002\070\012\000\002\051\005\000\002\051" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\006\000\002\050\010\000" +
    "\002\050\005\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\072\004\000\002\072\003\000\002\073" +
    "\012\000\002\073\012\000\002\017\004\000\002\017\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\043\005\000\002\054\005\000\002\055" +
    "\005\000\002\055\005\000\002\056\005\000\002\057\005" +
    "\000\002\060\005\000\002\060\005\000\002\044\005\000" +
    "\002\074\005\000\002\075\005\000\002\076\015\000\002" +
    "\077\004\000\002\077\003\000\002\100\003\000\002\100" +
    "\003\000\002\101\011\000\002\103\005\000\002\103\003" +
    "\000\002\102\007\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\105\012\000\002\105\007\000\002" +
    "\107\005\000\002\107\003\000\002\106\003\000\002\106" +
    "\003\000\002\110\003\000\002\110\003\000\002\111\003" +
    "\000\002\111\003\000\002\112\012\000\002\113\006\000" +
    "\002\113\010\000\002\114\005\000\002\114\005\000\002" +
    "\114\006\000\002\114\005\000\002\114\005\000\002\114" +
    "\005\000\002\114\005\000\002\115\014\000\002\116\017" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\004\010\007\001\002\000\006\002\ufffa\010" +
    "\ufffa\001\002\000\004\002\u01fd\001\002\000\006\002\ufffb" +
    "\010\ufffb\001\002\000\010\004\016\052\017\062\015\001" +
    "\002\000\006\002\ufffc\010\ufffc\001\002\000\006\002\uffff" +
    "\010\007\001\002\000\006\002\ufffd\010\ufffd\001\002\000" +
    "\004\002\000\001\002\000\006\002\ufffe\010\ufffe\001\002" +
    "\000\004\010\u01e0\001\002\000\004\010\113\001\002\000" +
    "\004\013\020\001\002\000\004\026\021\001\002\000\004" +
    "\073\022\001\002\000\004\010\023\001\002\000\006\054" +
    "\024\076\027\001\002\000\004\076\104\001\002\000\010" +
    "\010\uff7f\054\uff7f\076\uff7f\001\002\000\010\010\uff7e\054" +
    "\uff7e\076\uff7e\001\002\000\004\035\037\001\002\000\010" +
    "\010\033\054\024\076\027\001\002\000\010\010\uff7d\054" +
    "\uff7d\076\uff7d\001\002\000\010\010\uff80\054\uff80\076\uff80" +
    "\001\002\000\004\052\034\001\002\000\004\011\035\001" +
    "\002\000\004\010\036\001\002\000\006\002\uff81\010\uff81" +
    "\001\002\000\004\076\040\001\002\000\006\027\uff7a\036" +
    "\uff7a\001\002\000\006\027\042\036\043\001\002\000\004" +
    "\076\103\001\002\000\004\026\044\001\002\000\006\037" +
    "\047\072\045\001\002\000\034\010\uffa4\011\uffa4\013\uffa4" +
    "\023\uffa4\036\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\053\uffa4\063\uffa4\064\uffa4\001\002\000\004\053\102" +
    "\001\002\000\016\035\050\041\055\042\056\072\052\075" +
    "\051\076\053\001\002\000\016\035\050\041\055\042\056" +
    "\072\052\075\051\076\053\001\002\000\020\011\uff9a\027" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a\040\uff9a\001\002" +
    "\000\020\011\uff9c\027\uff9c\032\uff9c\033\uff9c\034\uff9c\036" +
    "\uff9c\040\uff9c\001\002\000\020\011\uff9b\027\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\036\uff9b\040\uff9b\001\002\000\014\011" +
    "\062\032\063\033\061\034\065\040\077\001\002\000\004" +
    "\035\074\001\002\000\004\035\057\001\002\000\016\035" +
    "\050\041\055\042\056\072\052\075\051\076\053\001\002" +
    "\000\014\011\062\027\064\032\063\033\061\034\065\001" +
    "\002\000\016\035\050\041\055\042\056\072\052\075\051" +
    "\076\053\001\002\000\016\035\050\041\055\042\056\072" +
    "\052\075\051\076\053\001\002\000\016\035\050\041\055" +
    "\042\056\072\052\075\051\076\053\001\002\000\016\035" +
    "\050\041\055\042\056\072\052\075\051\076\053\001\002" +
    "\000\016\035\050\041\055\042\056\072\052\075\051\076" +
    "\053\001\002\000\020\011\uffa0\027\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\036\uffa0\040\uffa0\001\002\000\014\011\062\032" +
    "\063\033\061\034\065\036\070\001\002\000\020\011\uff9e" +
    "\027\uff9e\032\uff9e\033\uff9e\034\uff9e\036\uff9e\040\uff9e\001" +
    "\002\000\020\011\uffa3\027\uffa3\032\uffa3\033\061\034\065" +
    "\036\uffa3\040\uffa3\001\002\000\020\011\uffa2\027\uffa2\032" +
    "\uffa2\033\061\034\065\036\uffa2\040\uffa2\001\002\000\020" +
    "\011\uffa1\027\uffa1\032\uffa1\033\uffa1\034\uffa1\036\uffa1\040" +
    "\uffa1\001\002\000\016\035\050\041\055\042\056\072\052" +
    "\075\051\076\053\001\002\000\014\011\062\032\063\033" +
    "\061\034\065\036\076\001\002\000\020\011\uff9f\027\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\036\uff9f\040\uff9f\001\002\000" +
    "\034\010\uffa5\011\uffa5\013\uffa5\023\uffa5\036\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\053\uffa5\063\uffa5\064" +
    "\uffa5\001\002\000\014\011\062\032\063\033\061\034\065" +
    "\036\101\001\002\000\020\011\uff9d\027\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\036\uff9d\040\uff9d\001\002\000\010\010\uff7c" +
    "\054\uff7c\076\uff7c\001\002\000\006\027\uff7b\036\uff7b\001" +
    "\002\000\004\026\105\001\002\000\010\072\111\073\110" +
    "\075\106\001\002\000\004\053\uff77\001\002\000\004\053" +
    "\112\001\002\000\004\053\uff76\001\002\000\004\053\uff78" +
    "\001\002\000\010\010\uff79\054\uff79\076\uff79\001\002\000" +
    "\004\010\115\001\002\000\004\010\ufff7\001\002\000\026" +
    "\005\130\012\143\013\123\015\140\017\131\020\142\023" +
    "\127\024\133\043\125\067\141\001\002\000\004\010\uffed" +
    "\001\002\000\004\010\uffec\001\002\000\004\010\122\001" +
    "\002\000\004\010\ufff8\001\002\000\030\004\137\005\130" +
    "\012\143\013\123\015\140\017\131\020\142\023\127\024" +
    "\133\043\125\067\141\001\002\000\004\026\u01de\001\002" +
    "\000\006\011\u01d7\027\u01d8\001\002\000\004\021\u0175\001" +
    "\002\000\006\011\uffc7\027\uffc7\001\002\000\004\026\u0173" +
    "\001\002\000\004\010\u0158\001\002\000\004\026\u0156\001" +
    "\002\000\006\011\uffc4\027\uffc4\001\002\000\004\026\u0154" +
    "\001\002\000\006\011\uffc3\027\uffc3\001\002\000\006\011" +
    "\uffc8\027\uffc8\001\002\000\006\011\uffc2\027\uffc2\001\002" +
    "\000\004\011\u0152\001\002\000\004\026\u0150\001\002\000" +
    "\004\021\u013f\001\002\000\010\006\273\021\271\023\272" +
    "\001\002\000\004\010\146\001\002\000\006\011\uffc5\027" +
    "\uffc5\001\002\000\006\011\uffc6\027\uffc6\001\002\000\004" +
    "\010\150\001\002\000\004\010\uffe2\001\002\000\020\006" +
    "\172\007\165\013\170\014\167\015\163\016\164\017\166" +
    "\001\002\000\004\010\161\001\002\000\004\010\uffe4\001" +
    "\002\000\004\010\uffdf\001\002\000\004\010\uffe5\001\002" +
    "\000\004\010\uffe6\001\002\000\004\010\uffe3\001\002\000" +
    "\004\010\uffe1\001\002\000\004\010\uffe0\001\002\000\022" +
    "\006\172\007\165\012\171\013\170\014\167\015\163\016" +
    "\164\017\166\001\002\000\004\010\uffe7\001\002\000\004" +
    "\010\263\001\002\000\004\010\255\001\002\000\004\010" +
    "\247\001\002\000\004\010\241\001\002\000\004\010\233" +
    "\001\002\000\004\010\223\001\002\000\004\011\221\001" +
    "\002\000\004\010\173\001\002\000\006\055\176\072\174" +
    "\001\002\000\026\010\uff6f\011\uff6f\013\uff6f\023\uff6f\027" +
    "\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\001\002" +
    "\000\026\010\uff6e\011\uff6e\013\uff6e\023\uff6e\027\uff6e\044" +
    "\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\001\002\000\004" +
    "\076\204\001\002\000\004\010\200\001\002\000\004\006" +
    "\201\001\002\000\004\011\202\001\002\000\004\010\203" +
    "\001\002\000\004\010\uffde\001\002\000\004\027\205\001" +
    "\002\000\004\076\206\001\002\000\006\035\207\056\210" +
    "\001\002\000\006\072\214\075\213\001\002\000\036\010" +
    "\uff74\011\uff74\013\uff74\023\uff74\027\uff74\036\uff74\044\uff74" +
    "\045\uff74\046\uff74\047\uff74\050\uff74\053\uff74\063\uff74\064" +
    "\uff74\001\002\000\006\027\uff72\036\uff72\001\002\000\006" +
    "\027\215\036\216\001\002\000\006\027\uff70\036\uff70\001" +
    "\002\000\006\027\uff71\036\uff71\001\002\000\006\072\214" +
    "\075\213\001\002\000\004\056\217\001\002\000\036\010" +
    "\uff75\011\uff75\013\uff75\023\uff75\027\uff75\036\uff75\044\uff75" +
    "\045\uff75\046\uff75\047\uff75\050\uff75\053\uff75\063\uff75\064" +
    "\uff75\001\002\000\006\027\uff73\036\uff73\001\002\000\004" +
    "\010\222\001\002\000\004\010\ufff5\001\002\000\006\055" +
    "\176\073\224\001\002\000\026\010\uff6d\011\uff6d\013\uff6d" +
    "\023\uff6d\027\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050" +
    "\uff6d\001\002\000\026\010\uff6c\011\uff6c\013\uff6c\023\uff6c" +
    "\027\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\001" +
    "\002\000\004\010\227\001\002\000\004\013\230\001\002" +
    "\000\004\011\231\001\002\000\004\010\232\001\002\000" +
    "\004\010\uffdd\001\002\000\006\055\176\073\224\001\002" +
    "\000\004\010\235\001\002\000\004\014\236\001\002\000" +
    "\004\011\237\001\002\000\004\010\240\001\002\000\004" +
    "\010\uffdc\001\002\000\006\055\176\073\224\001\002\000" +
    "\004\010\243\001\002\000\004\017\244\001\002\000\004" +
    "\011\245\001\002\000\004\010\246\001\002\000\004\010" +
    "\uffd8\001\002\000\004\076\250\001\002\000\004\010\251" +
    "\001\002\000\004\007\252\001\002\000\004\011\253\001" +
    "\002\000\004\010\254\001\002\000\004\010\uffdb\001\002" +
    "\000\004\074\256\001\002\000\004\010\257\001\002\000" +
    "\004\016\260\001\002\000\004\011\261\001\002\000\004" +
    "\010\262\001\002\000\004\010\uffd9\001\002\000\006\055" +
    "\176\072\174\001\002\000\004\010\265\001\002\000\004" +
    "\015\266\001\002\000\004\011\267\001\002\000\004\010" +
    "\270\001\002\000\004\010\uffda\001\002\000\004\026\u0103" +
    "\001\002\000\004\026\u0101\001\002\000\004\026\310\001" +
    "\002\000\004\027\275\001\002\000\004\024\277\001\002" +
    "\000\004\027\302\001\002\000\004\026\300\001\002\000" +
    "\006\055\176\072\174\001\002\000\004\027\uffba\001\002" +
    "\000\004\021\303\001\002\000\004\026\304\001\002\000" +
    "\004\031\305\001\002\000\004\011\306\001\002\000\004" +
    "\010\307\001\002\000\004\010\ufff2\001\002\000\004\072" +
    "\311\001\002\000\004\010\312\001\002\000\004\010\314" +
    "\001\002\000\004\010\uff98\001\002\000\004\043\320\001" +
    "\002\000\004\010\317\001\002\000\004\010\uff99\001\002" +
    "\000\006\020\321\043\320\001\002\000\004\021\324\001" +
    "\002\000\004\011\322\001\002\000\004\010\323\001\002" +
    "\000\004\010\ufff0\001\002\000\004\026\325\001\002\000" +
    "\006\031\326\051\327\001\002\000\004\023\374\001\002" +
    "\000\020\013\346\023\345\044\340\045\333\046\334\047" +
    "\344\050\347\001\002\000\022\011\uff92\013\uff92\023\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\001\002\000" +
    "\022\011\uff91\013\uff91\023\uff91\044\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\001\002\000\022\011\371\013\346\023" +
    "\345\044\340\045\333\046\334\047\344\050\347\001\002" +
    "\000\004\026\366\001\002\000\004\026\364\001\002\000" +
    "\022\011\uff8d\013\uff8d\023\uff8d\044\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\001\002\000\022\011\uff94\013\uff94\023" +
    "\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\001\002" +
    "\000\022\011\uff8e\013\uff8e\023\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\001\002\000\004\026\361\001\002" +
    "\000\022\011\uff8f\013\uff8f\023\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\001\002\000\022\011\uff90\013\uff90" +
    "\023\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\001" +
    "\002\000\022\011\uff93\013\uff93\023\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\001\002\000\004\026\356\001" +
    "\002\000\004\026\354\001\002\000\004\026\352\001\002" +
    "\000\004\026\350\001\002\000\006\055\176\072\174\001" +
    "\002\000\022\011\uff84\013\uff84\023\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\001\002\000\006\055\176\073" +
    "\224\001\002\000\022\011\uff8b\013\uff8b\023\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\050\uff8b\001\002\000\006\055" +
    "\176\072\174\001\002\000\022\011\uff8c\013\uff8c\023\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\001\002\000" +
    "\010\037\047\055\176\072\045\001\002\000\022\011\uff85" +
    "\013\uff85\023\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\001\002\000\022\011\uff86\013\uff86\023\uff86\044\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\001\002\000\010\037" +
    "\047\055\176\072\045\001\002\000\022\011\uff8a\013\uff8a" +
    "\023\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\001" +
    "\002\000\022\011\uff89\013\uff89\023\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\001\002\000\006\055\176\073" +
    "\224\001\002\000\022\011\uff87\013\uff87\023\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\001\002\000\006\055" +
    "\176\073\224\001\002\000\022\011\uff88\013\uff88\023\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\001\002\000" +
    "\022\011\uff95\013\uff95\023\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\001\002\000\004\010\372\001\002\000" +
    "\004\010\uff97\001\002\000\004\011\377\001\002\000\004" +
    "\026\375\001\002\000\006\055\176\072\174\001\002\000" +
    "\006\011\uff83\050\uff83\001\002\000\004\010\u0100\001\002" +
    "\000\004\010\uff96\001\002\000\006\055\176\072\174\001" +
    "\002\000\004\027\uffbb\001\002\000\006\022\u0105\030\u0104" +
    "\001\002\000\006\011\uffc1\027\uffc1\001\002\000\004\010" +
    "\u0106\001\002\000\004\010\u0107\001\002\000\016\013\u0116" +
    "\015\u0112\017\u0114\023\u0117\024\u0118\025\u0113\001\002\000" +
    "\004\010\uffd0\001\002\000\004\010\uffd3\001\002\000\004" +
    "\010\uffd2\001\002\000\004\010\uffd5\001\002\000\004\010" +
    "\u0110\001\002\000\004\010\uffd1\001\002\000\004\010\uffd6" +
    "\001\002\000\004\010\uffd4\001\002\000\020\013\u0116\015" +
    "\u0112\017\u0114\020\u0115\023\u0117\024\u0118\025\u0113\001\002" +
    "\000\004\010\uffd7\001\002\000\004\010\u0139\001\002\000" +
    "\004\010\u0133\001\002\000\004\010\u012d\001\002\000\004" +
    "\011\u012b\001\002\000\004\010\u0125\001\002\000\004\010" +
    "\u011f\001\002\000\004\010\u0119\001\002\000\006\055\176" +
    "\072\174\001\002\000\004\010\u011b\001\002\000\004\024" +
    "\u011c\001\002\000\004\011\u011d\001\002\000\004\010\u011e" +
    "\001\002\000\004\010\uffce\001\002\000\006\055\176\072" +
    "\174\001\002\000\004\010\u0121\001\002\000\004\023\u0122" +
    "\001\002\000\004\011\u0123\001\002\000\004\010\u0124\001" +
    "\002\000\004\010\uffcf\001\002\000\006\055\176\073\224" +
    "\001\002\000\004\010\u0127\001\002\000\004\013\u0128\001" +
    "\002\000\004\011\u0129\001\002\000\004\010\u012a\001\002" +
    "\000\004\010\uffcd\001\002\000\004\010\u012c\001\002\000" +
    "\004\010\ufff4\001\002\000\006\055\176\073\224\001\002" +
    "\000\004\010\u012f\001\002\000\004\017\u0130\001\002\000" +
    "\004\011\u0131\001\002\000\004\010\u0132\001\002\000\004" +
    "\010\uffcc\001\002\000\006\055\176\073\224\001\002\000" +
    "\004\010\u0135\001\002\000\004\025\u0136\001\002\000\004" +
    "\011\u0137\001\002\000\004\010\u0138\001\002\000\004\010" +
    "\uffca\001\002\000\006\055\176\072\174\001\002\000\004" +
    "\010\u013b\001\002\000\004\015\u013c\001\002\000\004\011" +
    "\u013d\001\002\000\004\010\u013e\001\002\000\004\010\uffcb" +
    "\001\002\000\004\026\u0140\001\002\000\006\070\u0142\071" +
    "\u0141\001\002\000\004\024\u0148\001\002\000\004\024\u0143" +
    "\001\002\000\004\026\u0144\001\002\000\004\072\u0145\001" +
    "\002\000\004\011\u0146\001\002\000\004\010\u0147\001\002" +
    "\000\004\010\uff61\001\002\000\004\026\u0149\001\002\000" +
    "\004\072\u014a\001\002\000\004\050\u014b\001\002\000\004" +
    "\026\u014c\001\002\000\004\072\u014d\001\002\000\004\011" +
    "\u014e\001\002\000\004\010\u014f\001\002\000\004\010\uff60" +
    "\001\002\000\006\055\176\072\174\001\002\000\006\011" +
    "\uffbc\027\uffbc\001\002\000\004\010\u0153\001\002\000\006" +
    "\002\ufff9\010\ufff9\001\002\000\006\055\176\072\174\001" +
    "\002\000\006\011\uffbf\027\uffbf\001\002\000\006\055\176" +
    "\073\224\001\002\000\006\011\uffbd\027\uffbd\001\002\000" +
    "\004\010\u0159\001\002\000\006\006\u016c\007\u0163\001\002" +
    "\000\004\010\u016a\001\002\000\004\010\u0161\001\002\000" +
    "\004\010\u015d\001\002\000\004\005\u015e\001\002\000\004" +
    "\011\u015f\001\002\000\004\010\u0160\001\002\000\004\010" +
    "\ufff6\001\002\000\004\007\u0163\001\002\000\004\010\uffeb" +
    "\001\002\000\004\010\u0164\001\002\000\004\076\u0165\001" +
    "\002\000\004\010\u0166\001\002\000\004\007\u0167\001\002" +
    "\000\004\011\u0168\001\002\000\004\010\u0169\001\002\000" +
    "\004\010\uffe8\001\002\000\004\006\u016c\001\002\000\004" +
    "\010\uffea\001\002\000\004\010\u016d\001\002\000\006\055" +
    "\176\072\174\001\002\000\004\010\u016f\001\002\000\004" +
    "\006\u0170\001\002\000\004\011\u0171\001\002\000\004\010" +
    "\u0172\001\002\000\004\010\uffe9\001\002\000\006\055\176" +
    "\072\174\001\002\000\006\011\uffc0\027\uffc0\001\002\000" +
    "\004\026\u0176\001\002\000\010\022\u0179\031\u0177\051\u0178" +
    "\001\002\000\004\023\374\001\002\000\020\013\346\023" +
    "\345\044\340\045\333\046\334\047\344\050\347\001\002" +
    "\000\004\010\u017a\001\002\000\004\010\u017b\001\002\000" +
    "\022\013\u018e\023\u018d\025\u018a\044\u018b\045\u0189\046\u0188" +
    "\047\u018c\050\u0190\001\002\000\004\010\uffb1\001\002\000" +
    "\004\010\uffb6\001\002\000\004\010\uffb2\001\002\000\004" +
    "\010\uffb5\001\002\000\004\010\uffb3\001\002\000\004\010" +
    "\uffb0\001\002\000\004\010\uffb7\001\002\000\004\010\uffb8" +
    "\001\002\000\004\010\uffb4\001\002\000\004\010\u0186\001" +
    "\002\000\024\013\u018e\023\u018d\025\u018a\043\u018f\044\u018b" +
    "\045\u0189\046\u0188\047\u018c\050\u0190\001\002\000\004\010" +
    "\uffb9\001\002\000\004\010\u01c7\001\002\000\004\010\u01c1" +
    "\001\002\000\004\010\u01bb\001\002\000\004\010\u01b0\001" +
    "\002\000\004\010\u01a5\001\002\000\004\010\u019f\001\002" +
    "\000\004\010\u0199\001\002\000\004\011\u0197\001\002\000" +
    "\004\010\u0191\001\002\000\006\055\176\072\174\001\002" +
    "\000\004\010\u0193\001\002\000\004\050\u0194\001\002\000" +
    "\004\011\u0195\001\002\000\004\010\u0196\001\002\000\004" +
    "\010\uffa6\001\002\000\004\010\u0198\001\002\000\004\010" +
    "\ufff1\001\002\000\006\055\176\073\224\001\002\000\004" +
    "\010\u019b\001\002\000\004\013\u019c\001\002\000\004\011" +
    "\u019d\001\002\000\004\010\u019e\001\002\000\004\010\uffae" +
    "\001\002\000\006\055\176\072\174\001\002\000\004\010" +
    "\u01a1\001\002\000\004\023\u01a2\001\002\000\004\011\u01a3" +
    "\001\002\000\004\010\u01a4\001\002\000\004\010\uffaf\001" +
    "\002\000\010\037\047\055\176\072\045\001\002\000\004" +
    "\010\u01ac\001\002\000\004\010\u01a8\001\002\000\004\047" +
    "\u01a9\001\002\000\004\011\u01aa\001\002\000\004\010\u01ab" +
    "\001\002\000\004\010\uffa8\001\002\000\004\047\u01ad\001" +
    "\002\000\004\011\u01ae\001\002\000\004\010\u01af\001\002" +
    "\000\004\010\uffa9\001\002\000\010\037\047\055\176\072" +
    "\045\001\002\000\004\010\u01b7\001\002\000\004\010\u01b3" +
    "\001\002\000\004\044\u01b4\001\002\000\004\011\u01b5\001" +
    "\002\000\004\010\u01b6\001\002\000\004\010\uffad\001\002" +
    "\000\004\044\u01b8\001\002\000\004\011\u01b9\001\002\000" +
    "\004\010\u01ba\001\002\000\004\010\uffac\001\002\000\006" +
    "\055\176\073\224\001\002\000\004\010\u01bd\001\002\000" +
    "\004\025\u01be\001\002\000\004\011\u01bf\001\002\000\004" +
    "\010\u01c0\001\002\000\004\010\uffa7\001\002\000\006\055" +
    "\176\073\224\001\002\000\004\010\u01c3\001\002\000\004" +
    "\045\u01c4\001\002\000\004\011\u01c5\001\002\000\004\010" +
    "\u01c6\001\002\000\004\010\uffab\001\002\000\006\055\176" +
    "\073\224\001\002\000\004\010\u01c9\001\002\000\004\046" +
    "\u01ca\001\002\000\004\011\u01cb\001\002\000\004\010\u01cc" +
    "\001\002\000\004\010\uffaa\001\002\000\022\011\u01ce\013" +
    "\346\023\345\044\340\045\333\046\334\047\344\050\347" +
    "\001\002\000\004\010\u01cf\001\002\000\004\010\uffef\001" +
    "\002\000\004\050\u01d1\001\002\000\004\026\u01d5\001\002" +
    "\000\004\011\u01d3\001\002\000\004\010\u01d4\001\002\000" +
    "\004\010\uffee\001\002\000\006\055\176\072\174\001\002" +
    "\000\004\011\uff82\001\002\000\004\010\u01dd\001\002\000" +
    "\016\013\123\015\140\017\131\020\u01da\023\127\024\133" +
    "\001\002\000\006\011\uffc9\027\uffc9\001\002\000\004\021" +
    "\u01db\001\002\000\004\026\u01dc\001\002\000\004\030\u0104" +
    "\001\002\000\004\010\ufff3\001\002\000\006\055\176\073" +
    "\224\001\002\000\006\011\uffbe\027\uffbe\001\002\000\004" +
    "\057\u01e1\001\002\000\004\060\u01e7\001\002\000\004\010" +
    "\u01e3\001\002\000\004\062\u01e4\001\002\000\004\011\u01e5" +
    "\001\002\000\004\010\u01e6\001\002\000\006\002\uff6b\010" +
    "\uff6b\001\002\000\004\076\u01e8\001\002\000\006\053\u01ea" +
    "\061\u01e9\001\002\000\010\035\u01eb\065\u01ed\076\u01ec\001" +
    "\002\000\004\010\uff6a\001\002\000\010\035\u01eb\065\u01ed" +
    "\076\u01ec\001\002\000\004\066\u01f7\001\002\000\004\035" +
    "\u01f4\001\002\000\010\053\u01f1\063\u01f0\064\u01ef\001\002" +
    "\000\010\035\u01eb\065\u01ed\076\u01ec\001\002\000\010\035" +
    "\u01eb\065\u01ed\076\u01ec\001\002\000\004\010\uff69\001\002" +
    "\000\012\036\uff68\053\uff68\063\uff68\064\uff68\001\002\000" +
    "\012\036\uff67\053\uff67\063\uff67\064\uff67\001\002\000\010" +
    "\035\u01eb\065\u01ed\076\u01ec\001\002\000\010\036\u01f6\063" +
    "\u01f0\064\u01ef\001\002\000\012\036\uff66\053\uff66\063\uff66" +
    "\064\uff66\001\002\000\012\037\047\055\176\072\045\073" +
    "\u01f8\001\002\000\012\036\uff62\053\uff62\063\uff62\064\uff62" +
    "\001\002\000\012\036\uff64\053\uff64\063\uff64\064\uff64\001" +
    "\002\000\012\036\uff63\053\uff63\063\uff63\064\uff63\001\002" +
    "\000\010\036\u01fc\063\u01f0\064\u01ef\001\002\000\012\036" +
    "\uff65\053\uff65\063\uff65\064\uff65\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fb\000\020\002\004\003\011\004\007\076\005\112" +
    "\003\117\012\120\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\013\004\007\076\005\112\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\077" +
    "\027\100\024\101\025\102\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\100\031\101\025\102\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\053\001\001\000\004\050" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\057\001\001\000\002\001\001\000\004" +
    "\050\072\001\001\000\004\050\071\001\001\000\004\050" +
    "\070\001\001\000\004\050\066\001\001\000\004\050\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\113\006\117\115\115\116\116\001\001\000\002" +
    "\001\001\000\022\034\123\035\125\036\134\037\144\040" +
    "\143\041\131\042\133\045\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\120\115\115\116\116\001" +
    "\001\000\002\001\001\000\022\034\123\035\125\036\134" +
    "\037\144\040\143\041\131\042\133\045\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\150\013\154\014\153\015\151\016\155\020\146" +
    "\021\156\022\157\023\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\161\014\153\015\151\016\155" +
    "\020\146\021\156\022\157\023\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\105\174\110\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\106\210\107\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\105\224\111\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\224\111\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\105\224\111\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\174\110\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\174\110\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\072" +
    "\314\073\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\372\001\001\000\024\017\331\043\342\044\334" +
    "\054\327\055\330\056\341\057\340\060\336\071\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\043\342" +
    "\044\334\054\327\055\330\056\341\057\340\060\336\071" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\105\174\110\350\001\001\000\002" +
    "\001\001\000\006\105\224\111\352\001\001\000\002\001" +
    "\001\000\006\105\174\110\354\001\001\000\002\001\001" +
    "\000\006\051\357\105\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\051\361\105\362\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\224\111\364\001" +
    "\001\000\002\001\001\000\006\105\224\111\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\105\174\110\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\174\110\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\024\u010d\025\u010b\026\u010a\027\u010e" +
    "\030\u0108\031\u0109\032\u010c\033\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\u0110\026\u010a\027\u010e\030" +
    "\u0108\031\u0109\032\u010c\033\u0107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\174\110\u0119\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\105\174\110\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\224" +
    "\111\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\224\111\u012d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\105\224\111" +
    "\u0133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\105" +
    "\174\110\u0139\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\105\174\110\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\174" +
    "\110\u0154\001\001\000\002\001\001\000\006\105\224\111" +
    "\u0156\001\001\000\002\001\001\000\010\007\u015b\010\u015a" +
    "\011\u0159\001\001\000\002\001\001\000\004\010\u016a\001" +
    "\001\000\004\011\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\105" +
    "\174\110\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\174\110\u0173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\u01cf\001\001\000" +
    "\024\017\u01cc\043\342\044\334\054\327\055\330\056\341" +
    "\057\340\060\336\071\335\001\001\000\002\001\001\000" +
    "\026\052\u0184\053\u0182\061\u0181\062\u017c\063\u017e\064\u0183" +
    "\065\u017f\066\u017d\067\u017b\070\u0180\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\053\u0186\061\u0181\062\u017c\063\u017e\064\u0183\065\u017f\066" +
    "\u017d\067\u017b\070\u0180\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\174\110\u0191\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\224" +
    "\111\u0199\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\105\174\110\u019f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u01a5\105\u01a6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u01b1" +
    "\105\u01b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\224\111\u01bb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\105\224\111\u01c1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\224" +
    "\111\u01c7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\043\342\044\334\054\327\055\330\056\341\057\340\060" +
    "\336\071\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\u01d1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\174" +
    "\110\u01d5\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\035\125\036\u01d8\037\144\040\143\041\131\042\133" +
    "\045\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\105\224\111\u01de\001\001\000\002\001\001\000\004\113" +
    "\u01e1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\114\u01ed" +
    "\001\001\000\002\001\001\000\004\114\u01fa\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\u01f2\001\001\000\004\114\u01f1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\114\u01f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u01f8\105\u01f9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Nodo raiz;
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico en la Línea " + (s.right) +" Columna "+s.left+ ". Identificador "+s.value + " no reconocido." );
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("Error en la Línea " + (s.right)+ " Columna "+s.left+". Identificador " +  s.value + " no reconocido.");
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



//ingresar codigo java

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ListaProductos ::= dolar rget tipo igual productos propietario igual entero sucursal igual entero guion dolar 
            {
              Nodo RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ent1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ent1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ent1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                        Nodo padre = new Nodo("ListaProductos");
                        Nodo padre1 = new Nodo("Propietario");
                        Nodo padre2 = new Nodo("Sucursal");
                        Nodo hijo_1 = new Nodo(ent,entright,entleft);
                        Nodo hijo_2 = new Nodo(ent1,ent1right,ent1left);
                        padre1.hijos.add(hijo_1);
                        padre2.hijos.add(hijo_2);
                        padre.hijos.add(padre1);
                        padre.hijos.add(padre2);
                        RESULT = padre;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaProductos",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ListaTiendas ::= dolar rget tipo igual tiendas propietario igual entero guion dolar 
            {
              Nodo RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo padre = new Nodo("ListaTiendas");
                    Nodo hijo_1 = new Nodo(ent,entright,entleft);
                    padre.hijos.add(hijo_1);
                    System.out.println("Nodo Padre ListaTiendas Creado");
                    RESULT = padre;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaTiendas",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ExpLog ::= identificador igual2 cadena 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("==");
                Nodo hijo_1 = new Nodo(id,idright,idleft);
                String cad1 = cad.replace("\"","");
                Nodo hijo_2 = new Nodo(cad1,cadright,cadleft);
                padre.hijos.add(hijo_1);
                padre.hijos.add(hijo_2);
                System.out.println("Nodo Padre Comparacion Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExpLog",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ExpLog ::= identificador igual2 LLamadaMate 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("==");
                Nodo hijo_1 = new Nodo(id,idright,idleft);
                padre.hijos.add(hijo_1);
                padre.hijos.add(llam);
                System.out.println("Nodo Padre Comparacion Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExpLog",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ExpLog ::= identificador igual2 Aritm 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int arileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ari = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("==");
                Nodo hijo_1 = new Nodo(id,idright,idleft);
                padre.hijos.add(hijo_1);
                padre.hijos.add(ari);
                System.out.println("Nodo Padre Comparacion Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExpLog",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ExpLog ::= para ExpLog parc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = exp;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExpLog",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ExpLog ::= rnot para ExpLog parc 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("Not");
                padre.hijos.add(exp);
                System.out.println("Nodo Padre Not Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExpLog",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ExpLog ::= ExpLog ror ExpLog 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("##");
                padre.hijos.add(izq);
                padre.hijos.add(der);
                System.out.println("Nodo Padre Or Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExpLog",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ExpLog ::= ExpLog rand ExpLog 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("%%");
                padre.hijos.add(izq);
                padre.hijos.add(der);
                System.out.println("Nodo Padre And Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExpLog",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CuerpoConsulta ::= extraer de identificador donde ExpLog puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("Consulta",idright,idleft);
                    Nodo hijo_1 = new Nodo(id,idright,idleft);
                    padre.hijos.add(hijo_1);
                    padre.hijos.add(exp);
                    System.out.println("Nodo Padre Consulta Creado");
                    RESULT = padre;
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CuerpoConsulta",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CuerpoConsulta ::= extraer de identificador puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("Consulta",idright,idleft);
                    Nodo hijo_1 = new Nodo(id,idright,idleft);
                    padre.hijos.add(hijo_1);
                    System.out.println("Nodo Padre Consulta Creado");
                    RESULT = padre;
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CuerpoConsulta",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Consulta ::= dolar query dolar CuerpoConsulta dolar query guion dolar 
            {
              Nodo RESULT =null;
		int consultaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int consultaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo consulta = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                RESULT = consulta;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Consulta",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ICadena ::= LLamadaMate 
            {
              Nodo RESULT =null;
		int llamadaMleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamadaMright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llamadaM = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = llamadaM;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ICadena",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ICadena ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("Cadena",cadright,cadleft);
                String cad1 = cad.replace("\"","");
                Nodo hijo_1 = new Nodo(cad1,cadright,cadleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre Cadena Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ICadena",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IEntero ::= LLamadaMate 
            {
              Nodo RESULT =null;
		int llamadaMleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamadaMright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llamadaM = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = llamadaM;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IEntero",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IEntero ::= entero 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("Entero",enteroright,enteroleft);
                Nodo hijo_1 = new Nodo(entero,enteroright,enteroleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre Entero Creado");
                RESULT = padre;
                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IEntero",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ValPara ::= decimal 
            {
              Nodo RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("Decimal",decimalright,decimalleft);
                Nodo hijo_1 = new Nodo(decimal,decimalright,decimalleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre Decimal Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ValPara",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ValPara ::= entero 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("Entero",enteroright,enteroleft);
                Nodo hijo_1 = new Nodo(entero,enteroright,enteroleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre Entero Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ValPara",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ParaLlamada ::= ValPara 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("LValMetMate");
                    lista.hijos.add(a);
                    System.out.println("Nodo Padre LValMetMate Creado");
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParaLlamada",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ParaLlamada ::= ParaLlamada coma ValPara 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    lista.hijos.add(a);
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParaLlamada",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LLamadaMate ::= corcha identificador coma identificador corchc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombremateleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombremateright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombremate = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int nombrevarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nombrevarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String nombrevar = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    Nodo padre = new Nodo("LLamadaMate",aright,aleft);
                    Nodo hijo_1 = new Nodo(nombremate,nombremateright,nombremateleft);
                    Nodo hijo_2 = new Nodo(nombrevar,nombrevarright,nombrevarleft);
                    padre.hijos.add(hijo_1);
                    padre.hijos.add(hijo_2);
                    System.out.println("Nodo Padre LlamadaMate Creado");
                    RESULT = padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLamadaMate",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LLamadaMate ::= corcha identificador coma identificador para ParaLlamada parc corchc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int nombremateleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombremateright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String nombremate = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int nombrevarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nombrevarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String nombrevar = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo padre = new Nodo("LLamadaMate",aright,aleft);
                    Nodo hijo_1 = new Nodo(nombremate,nombremateright,nombremateleft);
                    Nodo hijo_2 = new Nodo(nombrevar,nombrevarright,nombrevarleft);
                    Nodo hijo_3 = new Nodo("ParametrosMetodMate",bright,bleft);
                    hijo_3.hijos.add(param);
                    padre.hijos.add(hijo_1);
                    padre.hijos.add(hijo_2);
                    padre.hijos.add(hijo_3);
                    System.out.println("Nodo Padre LlamadaMate Creado");
                    RESULT = padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLamadaMate",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ValCons ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("Cadena");
                String cad1 = cad.replace("\"","");
                Nodo hijo_1 = new Nodo(cad1,cadright,cadleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre Cadena Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ValCons",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ValCons ::= decimal 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("Decimal");
                Nodo hijo_1 = new Nodo(dec,decright,decleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre Decimal Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ValCons",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ValCons ::= entero 
            {
              Nodo RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("Entero");
                Nodo hijo_1 = new Nodo(ent,entright,entleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre Entero Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ValCons",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Cons ::= cons identificador igual ValCons puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Nodo padre = new Nodo("Constante");
            Nodo hijo_1 = new Nodo(id,idright,idleft);
            padre.hijos.add(hijo_1);
            padre.hijos.add(val);
            System.out.println("Nodo Padre Constante Creado");
            RESULT = padre;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cons",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Parametros ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("ListaParametro");
                    Nodo hijo_1 = new Nodo(id,idright,idleft);
                    lista.hijos.add(hijo_1);
                    System.out.println("Nodo Lista ListaParamentros Creado");
                    RESULT = lista;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Parametros ::= Parametros coma identificador 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo hijo_1 = new Nodo(id,idright,idleft);
                    lista.hijos.add(hijo_1);
                    RESULT = lista;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Metod ::= identificador para Parametros parc igual Aritm puntoycoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int arileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo ari = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo padre = new Nodo("Metodo");
                Nodo hijo_1 = new Nodo(id,idright,idleft);
                padre.hijos.add(hijo_1);
                padre.hijos.add(par);
                padre.hijos.add(ari);
                System.out.println("Nodo Padre Metodo Creado");
                RESULT = padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Metod",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Mate1 ::= Cons 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mate1",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Mate1 ::= Metod 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mate1",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CuerpoMate ::= Mate1 
            {
              Nodo RESULT =null;
		int mateleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int materight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mate = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("ListaValMate");
                    lista.hijos.add(mate);
                    System.out.println("Nodo Lista ListaValoresMate Creado");
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CuerpoMate",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CuerpoMate ::= CuerpoMate Mate1 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mateleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int materight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mate = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    lista.hijos.add(mate);
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CuerpoMate",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EMate ::= dolar mate nombre igual cadena dolar CuerpoMate dolar mate guion dolar 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int mateleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int materight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo mate = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("Mate",aright,aleft);
                Nodo padre1 = new Nodo("NombreMate");
                String cad1 = cad.replace("\"","");
                Nodo hijo_1 = new Nodo(cad1,cadright,cadleft);
                padre1.hijos.add(hijo_1);
                padre.hijos.add(padre1);
                padre.hijos.add(mate);
                System.out.println("Nodo Padre Mate Creado");
                RESULT = padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EMate",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SucursalEP ::= sucursal igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("SucursalEP",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre SucursalEP Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SucursalEP",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CodigoEP ::= codigo igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("CodigoEP",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre CodigoEP Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodigoEP",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SucursalMP ::= sucursal igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("SucursalMP",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre SucursalMP Creado");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SucursalMP",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TamanoMP ::= tamano igual LLamadaMate 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("TamanoMP",aright,aleft);
                padre.hijos.add(llam);
                System.out.println("Nodo Padre TamanoMP Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TamanoMP",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TamanoMP ::= tamano igual Aritm 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ari = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("TamanoMP",aright,aleft);
                padre.hijos.add(ari);
                System.out.println("Nodo Padre TamanoMP Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TamanoMP",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ColorMP ::= color igual ICadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("ColorMP",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre ColorMP Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ColorMP",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MarcaMP ::= marca igual ICadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("MarcaMP",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre MarcaMP Creado");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MarcaMP",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CantidadMP ::= cantidad igual LLamadaMate 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("CantidadMP",aright,aleft);
                padre.hijos.add(llam);
                System.out.println("Nodo Padre CantidadMP Creado");
                RESULT = padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CantidadMP",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CantidadMP ::= cantidad igual Aritm 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ari = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("CantidadMP",aright,aleft);
                padre.hijos.add(ari);
                System.out.println("Nodo Padre CantidadMP Creado");
                RESULT = padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CantidadMP",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NombreMP ::= nombre igual ICadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("NombreMP",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre NombreMP Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NombreMP",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CodigoMP ::= codigo igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("CodigoMP",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre CodigoMP Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodigoMP",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CampoMP ::= SucursalMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CampoMP ::= TamanoMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CampoMP ::= ColorMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CampoMP ::= MarcaMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CampoMP ::= CantidadMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CampoMP ::= NombreMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CampoMP ::= CodigoMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoMP",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ModificarPro ::= CampoMP 
            {
              Nodo RESULT =null;
		int campoMPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoMPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoMP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("LCampoModP");
                    lista.hijos.add(campoMP);
                    System.out.println("Nodo Padre ListaCamposModPro Creado");
                    RESULT = lista;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarPro",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ModificarPro ::= ModificarPro CampoMP 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int campoMPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoMPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoMP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    lista.hijos.add(campoMP);
                    RESULT = lista;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarPro",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ModificarPro1 ::= dolar producto tipo igual eliminar CodigoEP guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int codEPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int codEPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo codEP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo padre = new Nodo("EliminarPro",aright,aleft);
                    padre.hijos.add(codEP);
                    System.out.println("Nodo Padre EliminarProducto Creado");
                    RESULT = padre;
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarPro1",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ModificarPro1 ::= dolar producto tipo igual modificar ModificarPro guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int modPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int modPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo modP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                    Nodo padre = new Nodo("ModPro",aright,aleft);
                    padre.hijos.add(modP);
                    System.out.println("Nodo Padre ModPro Creado");
                    RESULT = padre;
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarPro1",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ModificarProducto ::= ModificarPro1 
            {
              Nodo RESULT =null;
		int modPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int modPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo modP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo lista = new Nodo("ListaModPro");
                        lista.hijos.add(modP);
                        System.out.println("Nodo Lista ListaModificarProducto Creado");
                        RESULT = lista;
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarProducto",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ModificarProducto ::= ModificarProducto ModificarPro1 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int modPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int modPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo modP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        lista.hijos.add(modP);
                        RESULT = lista;
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarProducto",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Ope ::= decimal 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("Decimal",decright,decleft);
            Nodo hijo_1 = new Nodo(dec,decright,decleft);
            padre.hijos.add(hijo_1);
            System.out.println("Nodo Padre Decimal Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Ope ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("Identificador",idright,idleft);
            Nodo hijo_1 = new Nodo(id,idright,idleft);
            padre.hijos.add(hijo_1);
            System.out.println("Nodo Padre Identificador Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Ope ::= entero 
            {
              Nodo RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("Entero",entright,entleft);
            Nodo hijo_1 = new Nodo(ent,entright,entleft);
            padre.hijos.add(hijo_1);
            System.out.println("Nodo Padre Entero Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Ope ::= para Ope parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = a;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Ope ::= pot para Ope coma Ope parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Nodo padre = new Nodo("^",aright,aleft);
            padre.hijos.add(izq);
            padre.hijos.add(der);
            System.out.println("Nodo Padre Potencia Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Ope ::= raiz para Ope parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo ope = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Nodo padre = new Nodo("√",aright,aleft);
            padre.hijos.add(ope);
            System.out.println("Nodo Padre Raiz Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Ope ::= Ope div Ope 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("/",aright,aleft);
            padre.hijos.add(izq);
            padre.hijos.add(der);
            System.out.println("Nodo Padre Division Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Ope ::= Ope por Ope 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("*",aright,aleft);
            padre.hijos.add(izq);
            padre.hijos.add(der);
            System.out.println("Nodo Padre Multiplicacion Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Ope ::= Ope guion Ope 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("-",aright,aleft);
            padre.hijos.add(izq);
            padre.hijos.add(der);
            System.out.println("Nodo Padre Resta Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Ope ::= Ope mas Ope 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("+",aright,aleft);
            padre.hijos.add(izq);
            padre.hijos.add(der);
            System.out.println("Nodo Padre Suma Creado");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ope",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Aritm ::= entero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("Entero",aright,aleft);
            Nodo hijo_1 = new Nodo(a,aright,aleft);
            padre.hijos.add(hijo_1);
            System.out.println("Nodo Padre Entero Creado");
            RESULT = padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Aritm",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Aritm ::= llavea Ope llavec 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo ope = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            Nodo padre = new Nodo("EOA",aright,aleft);
            padre.hijos.add(ope);
            System.out.println("Nodo padre EOA Creado");
            RESULT = padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Aritm",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SucursalP ::= dolar sucursal dolar IEntero dolar sucursal guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("SucursalPro",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre SucursalProducto Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SucursalP",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ImgP ::= dolar img dolar ICadena dolar img guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int imgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo img = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("ImgPro",aright,aleft);
                padre.hijos.add(img);
                System.out.println("Nodo Padre ImagenProducto Creado");
                RESULT = padre;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImgP",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TamanoP ::= dolar tamano dolar LLamadaMate dolar tamano guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("TamanoPro",aright,aleft);
                padre.hijos.add(llam);
                System.out.println("Nodo Padre TamanoProducto Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TamanoP",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TamanoP ::= dolar tamano dolar Aritm dolar tamano guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int arileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ari = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("TamanoPro",aright,aleft);
                padre.hijos.add(ari);
                System.out.println("Nodo Padre TamanoProducto Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TamanoP",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ColorP ::= dolar color dolar ICadena dolar color guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("ColorPro",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre ColorProducto Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ColorP",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MarcaP ::= dolar marca dolar ICadena dolar marca guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("MarcaPro",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre MarcaProducto Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MarcaP",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CantidadP ::= dolar cantidad dolar LLamadaMate dolar cantidad guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("CantidadPro",aright,aleft);
                padre.hijos.add(llam);
                System.out.println("Nodo Padre CantidadProducto Creado");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CantidadP",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CantidadP ::= dolar cantidad dolar Aritm dolar cantidad guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int arileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ari = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("CantidadPro",aright,aleft);
                padre.hijos.add(ari);
                System.out.println("Nodo Padre CantidadProducto Creado");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CantidadP",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NombreP ::= dolar nombre dolar ICadena dolar nombre guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("NombrePro",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre NombreProducto Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NombreP",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CodigoP ::= dolar codigo dolar IEntero dolar codigo guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("CodigoPro",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre CodigoProducto Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodigoP",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CampoP ::= SucursalP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CampoP ::= ImgP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CampoP ::= TamanoP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CampoP ::= ColorP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CampoP ::= MarcaP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CampoP ::= CantidadP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CampoP ::= NombreP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CampoP ::= CodigoP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoP",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CrearProducto ::= CampoP 
            {
              Nodo RESULT =null;
		int campoPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("ListaCrearPro");
                    lista.hijos.add(campoP);
                    System.out.println("Nodo Lista CrearProducto Creado");
                    RESULT = lista;
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearProducto",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CrearProducto ::= CrearProducto CampoP 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int campoPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    lista.hijos.add(campoP);
                    RESULT = lista;
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearProducto",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PropietarioET ::= propietario igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("PropietarioET",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre PropietarioET Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropietarioET",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CodigoET ::= codigo igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("CodigoET",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre CodigoET Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodigoET",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TelefonoMT ::= telefono igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("TelefonoMT",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre TelefonoMT Creado");
                RESULT = padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TelefonoMT",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DireccionMT ::= direccion igual ICadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("DireccionMT",aright,aleft);
                    padre.hijos.add(cad);
                    System.out.println("Nodo Padre DireccionMT Creado");
                    RESULT = padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DireccionMT",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NombreMT ::= nombre igual ICadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("NombreMT",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre NombreMT Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NombreMT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PropietarioMT ::= propietario igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("PropietarioMT",aright,aleft);
                    padre.hijos.add(ent);
                    System.out.println("Nodo Padre PropietarioMT Creado");
                    RESULT = padre;
                 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropietarioMT",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CodigoMT ::= codigo igual IEntero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("CodigoMT",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre CodigoMT Creado");
                RESULT = padre;
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodigoMT",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ModificarT ::= tienda tipo igual modificacion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("ModificarT",aright,aleft);
                    Nodo hijo_1 = new Nodo("modificacion",bright,bleft);
                    padre.hijos.add(hijo_1);
                    System.out.println("Nodo Padre TipoModT Creado");
                    RESULT = padre;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarT",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CampoModT ::= TelefonoMT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoModT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CampoModT ::= DireccionMT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoModT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CampoModT ::= NombreMT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoModT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CampoModT ::= PropietarioMT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoModT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CampoModT ::= CodigoMT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoModT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CampoModT ::= ModificarT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoModT",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ModificarTienda ::= CampoModT 
            {
              Nodo RESULT =null;
		int modTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int modTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo modT = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo lista = new Nodo("ListaModT");
                        lista.hijos.add(modT);
                        System.out.println("Nodo Padre ListaModificarTienda Creado");
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarTienda",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ModificarTienda ::= ModificarTienda coma CampoModT 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int modTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int modTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo modT = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        lista.hijos.add(modT);
                        RESULT = lista;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ModificarTienda",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ImgT ::= dolar img dolar ICadena dolar img guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("ImgCrearT",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre ImagenCrearTienda Creado");
                RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImgT",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TelefonoT ::= dolar telefono dolar IEntero dolar telefono guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("TelCrearT",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre CodigoCrearTienda Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TelefonoT",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DireccionT ::= dolar direccion dolar ICadena dolar direccion guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("DirCrearT",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre DireccionCrearTienda Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DireccionT",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NombreT ::= dolar nombre dolar ICadena dolar nombre guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("NombreCrearT",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre NombreCrearTienda Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NombreT",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PropietarioT ::= dolar propietario dolar IEntero dolar propietario guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("ProCrearT",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre PropietarioCrearTienda Creado");
                RESULT = padre;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropietarioT",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CodigoT ::= dolar codigo dolar IEntero dolar codigo guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("CodCrearT",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre CodigoCrearTienda Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CodigoT",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CrearT ::= ImgT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CrearT ::= TelefonoT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CrearT ::= DireccionT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CrearT ::= NombreT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CrearT ::= PropietarioT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CrearT ::= CodigoT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearT",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CrearTienda ::= CrearT 
            {
              Nodo RESULT =null;
		int campoTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoT = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("LCrearTienda");
                    lista.hijos.add(campoT);
                    System.out.println("Nodo Lista CrearTienda Creado");
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearTienda",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CrearTienda ::= CrearTienda CrearT 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int campoTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoT = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    lista.hijos.add(campoT);
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CrearTienda",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DireccionU ::= dolar direccion dolar ICadena dolar direccion guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("DireUserC",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre DireccionUserC Cread");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DireccionU",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EmailU ::= dolar email dolar correo dolar email guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int emailleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int emailright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String email = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("EmailUserC",aright,aleft);
                Nodo hijo_1 = new Nodo(email,emailright, emailleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre EmailUserC Cread");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EmailU",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TelU ::= dolar telefono dolar IEntero dolar telefono guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo ent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("TelUserC",aright,aleft);
                padre.hijos.add(ent);
                System.out.println("Nodo Padre TelefonoUserC Cread");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TelU",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PassU ::= dolar contrasena dolar identificador dolar contrasena guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("PassUserC",aright,aleft);
                Nodo hijo_1 = new Nodo(id,idright,idleft);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre ApellidoUserC Cread");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PassU",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ApellidoU ::= dolar apellido dolar ICadena dolar apellido guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("ApellidoUserC",aright,aleft);
                padre.hijos.add(cad);
                System.out.println("Nodo Padre ApellidoUserC Cread");
                RESULT = padre;
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ApellidoU",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NombreU ::= dolar nombre dolar ICadena dolar nombre guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo cadena = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            Nodo padre = new Nodo("NombreUserC",aright,aleft);
            padre.hijos.add(cadena);
            System.out.println("Nodo Padre NombreUserC Cread");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NombreU",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IdU ::= dolar id dolar IEntero dolar id guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo entero = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            Nodo padre = new Nodo("IDUserC",aright,aleft);
            padre.hijos.add(entero);
            System.out.println("Nodo Padre IDUsuario Cread");
            RESULT = padre;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IdU",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CampoU ::= DireccionU 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CampoU ::= EmailU 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CampoU ::= TelU 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CampoU ::= PassU 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CampoU ::= ApellidoU 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CampoU ::= NombreU 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CampoU ::= IdU 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CampoU",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RegistrarU ::= CampoU 
            {
              Nodo RESULT =null;
		int campoUleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoUright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoU = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("RegistrarU");
                    lista.hijos.add(campoU);
                    System.out.println("Nodo Lista RegistrarU Creado");
                    RESULT = lista;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RegistrarU",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RegistrarU ::= RegistrarU CampoU 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int campoUleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int campoUright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo campoU = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    lista.hijos.add(campoU);
                    RESULT = lista;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RegistrarU",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PassL ::= dolar contrasena dolar identificador dolar contrasena guion dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            Nodo padre = new Nodo("PasswordUL",idright,idleft);
            Nodo hijo_1 = new Nodo(id,idright,idleft);
            padre.hijos.add(hijo_1);
            System.out.println("Nodo Padre Cadena Creado");
            RESULT = padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PassL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IdL ::= dolar id dolar IEntero dolar id guion dolar 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo entero = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            Nodo padre = new Nodo("IDUsuarioL",enteroright, enteroleft);
            padre.hijos.add(entero);
            System.out.println("Nodo Padre IEntero Creado");
            RESULT = padre;
            
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IdL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Login ::= PassL IdL 
            {
              Nodo RESULT =null;
		int passleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int passright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo pass = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("CamposLogin");
            padre.hijos.add(pass);
            padre.hijos.add(id);
            System.out.println("Nodo CamposLogin Creado");
            RESULT = padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Login",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Login ::= IdL PassL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int passleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int passright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo pass = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo padre = new Nodo("CamposLogin");
            padre.hijos.add(id);
            padre.hijos.add(pass);
            System.out.println("Nodo CamposLogin Creado");
            RESULT = padre;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Login",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Accion ::= ListaProductos 
            {
              Nodo RESULT =null;
		int listaPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo listaP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = listaP;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Accion ::= ListaTiendas 
            {
              Nodo RESULT =null;
		int listaTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo listaT = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = listaT;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Accion ::= dolar producto tipo igual eliminar CodigoEP SucursalEP guion dolar 
            {
              Nodo RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo cod = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sucleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sucright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo suc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                Nodo padre = new Nodo("EliminarProducto");
                padre.hijos.add(cod);
                padre.hijos.add(suc);
                System.out.println("Nodo Padre EliminarProducto Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Accion ::= dolar producto tipo igual modificar ModificarPro guion dolar 
            {
              Nodo RESULT =null;
		int modPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int modPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo modP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                Nodo padre = new Nodo("ModificarProducto");
                padre.hijos.add(modP);
                System.out.println("Nodo Padre ModificarProducto Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Accion ::= dolar tienda id igual entero dolar ModificarProducto dolar tienda guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int modPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int modPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo modP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("ModificarProducto");
                Nodo padre1 = new Nodo("SucursalMP");
                Nodo hijo_1 = new Nodo(a,aright,aleft);
                padre1.hijos.add(hijo_1);
                padre.hijos.add(padre1);
                padre.hijos.add(modP);
                System.out.println("Nodo Padre ModificarProducto Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Accion ::= dolar producto tipo igual creartienda dolar CrearProducto dolar producto guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int crearPleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int crearPright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo crearP = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("CrearProducto");
                Nodo hijo_1 = new Nodo("Crear",aright,aleft);
                padre.hijos.add(hijo_1);
                padre.hijos.add(crearP);
                System.out.println("Nodo padre CrearProducto Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Accion ::= dolar tienda CodigoET coma PropietarioET coma tipo igual eliminar guion dolar 
            {
              Nodo RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo cod = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int proleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo pro = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int elimleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int elimright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object elim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                Nodo padre = new Nodo("EliminarTienda");
                Nodo hijo_1 = new Nodo("eliminar",elimright,elimleft);
                padre.hijos.add(cod);
                padre.hijos.add(pro);
                padre.hijos.add(hijo_1);
                System.out.println("Nodo Padre EliminarTienda Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Accion ::= dolar ModificarTienda guion dolar 
            {
              Nodo RESULT =null;
		int modTleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int modTright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo modT = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                Nodo padre = new Nodo("ModificarTienda");
                padre.hijos.add(modT);
                System.out.println("Nodo Padre ModificarTienda Creado");
                RESULT = padre;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Accion ::= dolar tienda tipo igual creartienda dolar CrearTienda dolar tienda guion dolar 
            {
              Nodo RESULT =null;
		int creartleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int creartright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo creart = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("CrearTienda");
                padre.hijos.add(creart);
                System.out.println("Nodo Padre CrearTienda Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Accion ::= dolar crearusuario dolar RegistrarU dolar crearusuario guion dolar 
            {
              Nodo RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo reg = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("RegistrarUsuario");
                padre.hijos.add(reg);
                System.out.println("Nodo Padre RegistrarUsuario Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Accion ::= dolar iniciousuario dolar Login dolar iniciousuario guion dolar 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("Login");
                padre.hijos.add(log);
                System.out.println("Nodo Padre Login Creado");
                RESULT = padre;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Accion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListaAccion ::= Accion 
            {
              Nodo RESULT =null;
		int accionAleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int accionAright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo accionA = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    Nodo lista = new Nodo("ListaRequest", accionAright, accionAleft);
                    lista.hijos.add(accionA);
                    System.out.println("Nodo Lista ListaAccion Creado");
                    RESULT = lista;
                    
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaAccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListaAccion ::= ListaAccion Accion 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int accionAleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int accionAright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo accionA = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    lista.hijos.add(accionA);
                    RESULT = lista;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaAccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Request ::= dolar rrequest dolar ListaAccion dolar rrequest guion dolar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo accion = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                Nodo padre = new Nodo("Request",aright,aleft);
                padre.hijos.add(accion);
                System.out.println("Nodo Padre Request Creado");
                RESULT = padre;
                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Request",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inicio ::= Consulta 
            {
              Nodo RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo query = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = query;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Inicio",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inicio ::= EMate 
            {
              Nodo RESULT =null;
		int mateleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int materight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo mate = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = mate;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Inicio",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inicio ::= Request 
            {
              Nodo RESULT =null;
		int requestleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int requestright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo request = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = request;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Inicio",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cuerpo1 ::= Inicio 
            {
              Nodo RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo inicio = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo lista = new Nodo("ListaInicio");
            lista.hijos.add(inicio);
            System.out.println("Nodo ListaInicio Creado");
            RESULT = lista;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo1",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cuerpo1 ::= Cuerpo1 Inicio 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo inicio = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            lista.hijos.add(inicio);
            RESULT = lista;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo1",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cuerpo ::= Cuerpo1 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            Nodo cuerpo = new Nodo("cuerpo");
            cuerpo.hijos.add(sents);
            System.out.println("Nodo Cuerpo Creado");
            RESULT = cuerpo;    
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Cuerpo",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Iniciar ::= Cuerpo 
            {
              Nodo RESULT =null;
		int raizleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int raizright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo raiz = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                parser.raiz = raiz;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

